name: Apply Formatting and Update Changelog and Models

on:
  push:
    branches:
      - main
    paths:
      - 'helpers/get_models.py'
      - 'config.toml.sample'
      - 'app-data/version.txt'
      - '.github/workflows/formatting.yaml'
  workflow_dispatch:

jobs:
  format_and_update:
    runs-on: ubuntu-latest
    env:
      CHANGELOG_FILE: CHANGELOG.md
      FETCH_LIMIT: 20
      UNICHAT_REPO_PAT: ${{ secrets.UNICHAT_REPO_PAT }}
      UNICHAT_TS_REPO_PAT: ${{ secrets.UNICHAT_REPO_PAT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.FETCH_LIMIT }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort toml jq

      - name: Check for config.toml.sample changes
        id: check_config
        run: |
          git diff --name-only HEAD HEAD~1 | grep -q "config.toml.sample" && echo "config_changed=true" >> $GITHUB_OUTPUT || echo "config_changed=false" >> $GITHUB_OUTPUT

      - name: Generate models.py and models.ts content
        id: generate_models_content
        if: steps.check_config.outputs.config_changed == 'true'
        run: |
          OUTPUT=$(python helpers/get_models.py)
          MODELS_LIST=$(echo "$OUTPUT" | sed -n '/###MODELS_LIST_START###/,/###MODELS_LIST_END###/p' | sed '1d;$d')
          MODELS_MAX_TOKEN=$(echo "$OUTPUT" | sed -n '/###MODELS_MAX_TOKEN_START###/,/###MODELS_MAX_TOKEN_END###/p' | sed '1d;$d')
          echo "::set-output name=models_py_content::$(printf "MODELS_LIST = %s\nMODELS_MAX_TOKEN = %s\n" "$MODELS_LIST" "$MODELS_MAX_TOKEN")"
          echo "::set-output name=models_ts_content::$(printf "// This file is auto-generated by GitHub Actions\nexport const MODELS_LIST = %s;\nexport const MODELS_MAX_TOKEN: Record<string, string> = %s;\n" "$MODELS_LIST" "$MODELS_MAX_TOKEN")"

      - name: Clone unichat repository to /tmp/unichat
        if: steps.check_config.outputs.config_changed == 'true'
        run: |
          git clone https://amidabuddha:${{ env.UNICHAT_REPO_PAT }}@github.com/amidabuddha/unichat.git /tmp/unichat

      - name: Update models.py in unichat
        if: steps.check_config.outputs.config_changed == 'true'
        run: |
          echo "${{ steps.generate_models_content.outputs.models_py_content }}" > /tmp/unichat/unichat/models.py

      - name: Check if there are changes to be pushed to unichat
        id: check_unichat_git_status
        if: steps.check_config.outputs.config_changed == 'true'
        run: |
          echo "to_push=$(git -C /tmp/unichat status --porcelain | grep -q . && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Increment unichat patch version
        if: steps.check_config.outputs.config_changed == 'true' && steps.check_unichat_git_status.outputs.to_push == 'true'
        working-directory: /tmp/unichat
        run: |
          CURRENT_VERSION=$(grep '^version' pyproject.toml | awk -F '"' '{print $2}')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml

      - name: Commit and Push Changes to unichat
        if: steps.check_config.outputs.config_changed == 'true' && steps.check_unichat_git_status.outputs.to_push == 'true'
        working-directory: /tmp/unichat
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add unichat/models.py pyproject.toml
          git commit -m "Update models.py from source repository"
          git push origin main

      - name: Clone unichat-ts repository to /tmp/unichat-ts
        if: steps.check_config.outputs.config_changed == 'true'
        run: |
          git clone https://amidabuddha:${{ env.UNICHAT_TS_REPO_PAT }}@github.com/amidabuddha/unichat-ts.git /tmp/unichat-ts

      - name: Update src/models.ts in unichat-ts
        if: steps.check_config.outputs.config_changed == 'true'
        run: |
          echo "${{ steps.generate_models_content.outputs.models_ts_content }}" > /tmp/unichat-ts/src/models.ts

      - name: Check if there are changes to be pushed to unichat-ts
        id: check_unichat_ts_git_status
        if: steps.check_config.outputs.config_changed == 'true'
        run: |
          echo "to_push=$(git -C /tmp/unichat-ts status --porcelain | grep -q . && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Increment unichat-ts patch version
        if: steps.check_config.outputs.config_changed == 'true' && steps.check_unichat_ts_git_status.outputs.to_push == 'true'
        working-directory: /tmp/unichat-ts
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          jq --arg version "$NEW_VERSION" '.version = $version' package.json > temp.json && mv temp.json package.json

      - name: Commit and Push Changes to unichat-ts
        if: steps.check_config.outputs.config_changed == 'true' && steps.check_unichat_git_status.outputs.to_push == 'true'
        working-directory: /tmp/unichat-ts
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add src/models.ts package.json
          git commit -m "Update models.ts from source repository"
          git push origin main

      - name: Formatting
        run: |
          black --line-length 120 .
          isort .

      - name: Generate Changelog
        run: |
          categories=("Features" "Improvements" "Bug Fixes" "Others")
          patterns=("\[feature\(s\)\?\]" "\[improvement\(s\)\?\]" "\[bugfix\(es\)\?\]" "\[other\(s\)\?\]")
          echo -n "" > ${{ env.CHANGELOG_FILE }}
          for i in "${!categories[@]}"; do
            entries=$(git log -${{env.FETCH_LIMIT}} --pretty=format:"%h %s" | grep -i "${patterns[$i]}" | sed -E "s/${patterns[$i]} //" | awk '{print "- ["$1"] "substr($0, index($0,$2))}')
            if [ -n "$entries" ]; then
              echo -e "> ${categories[$i]}:\n$entries\n" >> ${{ env.CHANGELOG_FILE }}
            fi
          done
          echo -e "\n---" >> ${{ env.CHANGELOG_FILE }}

      - name: Bump version
        run: |
          cd app-data
          bash bump-version.sh
          cd -

      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add -A
          git commit -m "Formatting and updating the changelog." || echo "No changes to commit, continuing workflow"

      - name: Push changes
        if: ${{ success() }}
        run: git push
